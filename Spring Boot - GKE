# CLONAR CODIGO FUENTE DE EJEMPLO

git clone https://github.com/spring-guides/gs-spring-boot.git
cd gs-spring-boot/complete

# EJECUTAR APP LOCALMENTE

./mvnw -DskipTests spring-boot:run

# EMPAQUETAR LA APP COMO UN DOCKER CONTAINER

./mvnw -DskipTests package

./mvnw -DskipTests com.google.cloud.tools:jib-maven-plugin:build -Dimage=gcr.io/$GOOGLE_CLOUD_PROJECT/$nombre:v1

#LANZAR APP EN CONTENEDOR DE DOCKER

docker run -ti --rm -p 8080:8080 gcr.io/$GOOGLE_CLOUD_PROJECT/NOMBRE:v1

## LANZAR CLUSTER

gcloud container clusters create NOMBRE --num-nodes 2 --machine-type n1-standard-1 --zone us-central1-c

## IMPLEMENTAR APLICACION EN GKE 

kubectl create deployment NOMBRE --image=gcr.io/$GOOGLE_CLOUD_PROJECT/NOMBRE:v1

## PERMITIR EL TRAFICO EXTERNO CREANDO UN SERVICIO DE KUBERNETES LOAD BALANCER

kubectl create service loadbalancer NOMBRE --tcp=8080:8080

## ESCALAR GKE 

kubectl scale deployment NOMBRE --replicas=3

## ACTUALIZACION

./mvnw -DskipTests com.google.cloud.tools:jib-maven-plugin:build -Dimage=gcr.io/$GOOGLE_CLOUD_PROJECT/$nombre:v2

##ACTUALIZAR IMAGEN 

kubectl set image deployment/jorge2 jorge=gcr.io/bbva-it-noviembre-367414/jorge:v2
